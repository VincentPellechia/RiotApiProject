{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VinP1\\\\riotapp\\\\client\\\\src\\\\user.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MatchList from './matchList.js';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPage = () => {\n  _s();\n  const [userId, setUserId] = useState(null);\n  const {\n    region,\n    userName\n  } = useParams();\n  const [userInfo, setUserInfo] = useState(null);\n  const [matches, setMatches] = useState([]);\n  const [matchInfoList, setMatchInfoList] = useState([]);\n  useEffect(() => {\n    const getUserId = (region, userName) => {\n      fetch('http://localhost:8000/getUser', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          region: region,\n          userName: userName\n        })\n      }).then(res => res.json()).then(data => setUserId(data.user)).catch(error => {\n        console.error('Error:', error);\n      });\n    };\n    const fetchMatchesAndMatchInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/getMatches`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            input: userId\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user matches');\n        }\n        const data = await response.json();\n        setMatches(data.message);\n\n        // Fetch match info after matches have been fetched\n        const matchInfoData = await Promise.all(data.message.map(async match => {\n          const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              input: match\n            })\n          });\n          if (!matchResponse.ok) {\n            throw new Error(`Failed to fetch match info for matchId: ${match}`);\n          }\n          const matchInfo = await matchResponse.json();\n          return matchInfo.message;\n        }));\n        setMatchInfoList(matchInfoData);\n      } catch (error) {\n        console.error('Error fetching user matches:', error);\n      }\n    };\n    getUserId(region, userName);\n    if (userId) {\n      fetchMatchesAndMatchInfo();\n    }\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(userId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MatchList, {\n        userId: userId,\n        matches: matchInfoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPage, \"iCgsOv1rNKNkGHKesh/WOa5O7eA=\", false, function () {\n  return [useParams];\n});\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useEffect","useState","MatchList","useParams","jsxDEV","_jsxDEV","UserPage","_s","userId","setUserId","region","userName","userInfo","setUserInfo","matches","setMatches","matchInfoList","setMatchInfoList","getUserId","fetch","method","headers","body","JSON","stringify","then","res","json","data","user","catch","error","console","fetchMatchesAndMatchInfo","response","input","ok","Error","message","matchInfoData","Promise","all","map","match","matchResponse","matchInfo","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VinP1/riotapp/client/src/user.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MatchList from './matchList.js';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst UserPage = () => {\r\n  const [userId, setUserId] = useState(null);\r\n  const {region, userName} = useParams();\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [matches, setMatches] = useState([]);\r\n  const [matchInfoList, setMatchInfoList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getUserId = (region, userName) => {\r\n      fetch('http://localhost:8000/getUser', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ region: region, userName: userName })\r\n      })\r\n      .then((res) => res.json())\r\n      .then((data) => setUserId(data.user))\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n      });\r\n    };\r\n\r\n    const fetchMatchesAndMatchInfo = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/getMatches`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ input: userId }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user matches');\r\n        }\r\n  \r\n        const data = await response.json();\r\n        setMatches(data.message);\r\n  \r\n        // Fetch match info after matches have been fetched\r\n        const matchInfoData = await Promise.all(\r\n          data.message.map(async (match) => {\r\n            const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ input: match }),\r\n            });\r\n  \r\n            if (!matchResponse.ok) {\r\n              throw new Error(`Failed to fetch match info for matchId: ${match}`);\r\n            }\r\n  \r\n            const matchInfo = await matchResponse.json();\r\n            return matchInfo.message;\r\n          })\r\n        );\r\n  \r\n        setMatchInfoList(matchInfoData);\r\n      } catch (error) {\r\n        console.error('Error fetching user matches:', error);\r\n      }\r\n    };\r\n\r\n    getUserId(region, userName);\r\n\r\n    if (userId) {\r\n      fetchMatchesAndMatchInfo();\r\n    }\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      <p>{JSON.stringify(userId)}</p>\r\n        <div>\r\n          <MatchList userId = {userId} matches={matchInfoList} />\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM;IAACS,MAAM;IAAEC;EAAQ,CAAC,GAAGR,SAAS,CAAC,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMkB,SAAS,GAAGA,CAACR,MAAM,EAAEC,QAAQ,KAAK;MACtCQ,KAAK,CAAC,+BAA+B,EAAE;QACrCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEd,MAAM,EAAEA,MAAM;UAAEC,QAAQ,EAAEA;QAAS,CAAC;MAC7D,CAAC,CAAC,CACDc,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKnB,SAAS,CAACmB,IAAI,CAACC,IAAI,CAAC,CAAC,CACpCC,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC;IAED,MAAME,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAAE,kCAAiC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEW,KAAK,EAAE3B;UAAO,CAAC;QACxC,CAAC,CAAC;QAEF,IAAI,CAAC0B,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjD;QAEA,MAAMT,IAAI,GAAG,MAAMM,QAAQ,CAACP,IAAI,CAAC,CAAC;QAClCZ,UAAU,CAACa,IAAI,CAACU,OAAO,CAAC;;QAExB;QACA,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCb,IAAI,CAACU,OAAO,CAACI,GAAG,CAAC,MAAOC,KAAK,IAAK;UAChC,MAAMC,aAAa,GAAG,MAAMzB,KAAK,CAAE,oCAAmC,EAAE;YACtEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEW,KAAK,EAAEQ;YAAM,CAAC;UACvC,CAAC,CAAC;UAEF,IAAI,CAACC,aAAa,CAACR,EAAE,EAAE;YACrB,MAAM,IAAIC,KAAK,CAAE,2CAA0CM,KAAM,EAAC,CAAC;UACrE;UAEA,MAAME,SAAS,GAAG,MAAMD,aAAa,CAACjB,IAAI,CAAC,CAAC;UAC5C,OAAOkB,SAAS,CAACP,OAAO;QAC1B,CAAC,CACH,CAAC;QAEDrB,gBAAgB,CAACsB,aAAa,CAAC;MACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDb,SAAS,CAACR,MAAM,EAAEC,QAAQ,CAAC;IAE3B,IAAIH,MAAM,EAAE;MACVyB,wBAAwB,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAACzB,MAAM,CAAC,CAAC;EAEZ,oBACEH,OAAA;IAAAyC,QAAA,gBACEzC,OAAA;MAAAyC,QAAA,EAAIvB,IAAI,CAACC,SAAS,CAAChB,MAAM;IAAC;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B7C,OAAA;MAAAyC,QAAA,eACEzC,OAAA,CAACH,SAAS;QAACM,MAAM,EAAIA,MAAO;QAACM,OAAO,EAAEE;MAAc;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAjFID,QAAQ;EAAA,QAEeH,SAAS;AAAA;AAAAgD,EAAA,GAFhC7C,QAAQ;AAmFd,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}