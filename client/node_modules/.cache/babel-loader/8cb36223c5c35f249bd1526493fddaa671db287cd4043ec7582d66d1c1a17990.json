{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VinP1\\\\riotapp\\\\client\\\\src\\\\user.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MatchList from './matchList.js';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPage = _ref => {\n  _s();\n  let {} = _ref;\n  const [userId, setUserId] = useState(null);\n  const {\n    region,\n    input\n  } = useParams();\n  const [userInfo, setUserInfo] = useState(null);\n  const [matches, setMatches] = useState([]);\n  const [matchInfoList, setMatchInfoList] = useState([]);\n  useEffect(() => {\n    const fetchMatchesAndMatchInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/getMatches`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            input: userId\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user matches');\n        }\n        const data = await response.json();\n        setMatches(data.message);\n\n        // Fetch match info after matches have been fetched\n        const matchInfoData = await Promise.all(data.message.map(async match => {\n          const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              input: match\n            })\n          });\n          if (!matchResponse.ok) {\n            throw new Error(`Failed to fetch match info for matchId: ${match}`);\n          }\n          const matchInfo = await matchResponse.json();\n          return matchInfo.message;\n        }));\n        setMatchInfoList(matchInfoData);\n      } catch (error) {\n        console.error('Error fetching user matches:', error);\n      }\n    };\n    if (userId) {\n      fetchMatchesAndMatchInfo();\n    }\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(userId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MatchList, {\n        userId: userId,\n        matches: matchInfoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPage, \"vC5SvtDkBqjnMc74mwH4RvSWQNE=\", false, function () {\n  return [useParams];\n});\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useEffect","useState","MatchList","useParams","jsxDEV","_jsxDEV","UserPage","_ref","_s","userId","setUserId","region","input","userInfo","setUserInfo","matches","setMatches","matchInfoList","setMatchInfoList","fetchMatchesAndMatchInfo","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","message","matchInfoData","Promise","all","map","match","matchResponse","matchInfo","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VinP1/riotapp/client/src/user.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MatchList from './matchList.js';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst UserPage = ({ }) => {\r\n  const [userId, setUserId] = useState(null);\r\n  const {region, input} = useParams();\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [matches, setMatches] = useState([]);\r\n  const [matchInfoList, setMatchInfoList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMatchesAndMatchInfo = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/getMatches`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ input: userId }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user matches');\r\n        }\r\n  \r\n        const data = await response.json();\r\n        setMatches(data.message);\r\n  \r\n        // Fetch match info after matches have been fetched\r\n        const matchInfoData = await Promise.all(\r\n          data.message.map(async (match) => {\r\n            const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ input: match }),\r\n            });\r\n  \r\n            if (!matchResponse.ok) {\r\n              throw new Error(`Failed to fetch match info for matchId: ${match}`);\r\n            }\r\n  \r\n            const matchInfo = await matchResponse.json();\r\n            return matchInfo.message;\r\n          })\r\n        );\r\n  \r\n        setMatchInfoList(matchInfoData);\r\n      } catch (error) {\r\n        console.error('Error fetching user matches:', error);\r\n      }\r\n    };\r\n  \r\n    if (userId) {\r\n      fetchMatchesAndMatchInfo();\r\n    }\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      <p>{JSON.stringify(userId)}</p>\r\n        <div>\r\n          <MatchList userId = {userId} matches={matchInfoList} />\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}