{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VinP1\\\\riotapp\\\\client\\\\src\\\\user.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MatchList from './matchList.js';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPage = () => {\n  _s();\n  const [userId, setUserId] = useState(null);\n  const {\n    region,\n    userName\n  } = useParams();\n  const [matches, setMatches] = useState([]);\n  const [matchInfoList, setMatchInfoList] = useState([]);\n  useEffect(() => {\n    const fetchUserAndMatches = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/getUser`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            region,\n            userName\n          }) // Use destructuring here\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch user');\n        }\n        const data = await response.json();\n        setUserId(data.user);\n\n        // Fetch matches only if the user data is available\n        if (data.user) {\n          const matchesResponse = await fetch(`http://localhost:8000/getMatches`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              input: data.user\n            })\n          });\n          if (!matchesResponse.ok) {\n            throw new Error('Failed to fetch user matches');\n          }\n          const matchesData = await matchesResponse.json();\n          setMatches(matchesData.message);\n\n          // Fetch match info after matches have been fetched\n          const matchInfoData = await Promise.all(matchesData.message.map(async match => {\n            const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                input: match\n              })\n            });\n            if (!matchResponse.ok) {\n              throw new Error(`Failed to fetch match info for matchId: ${match}`);\n            }\n            const matchInfo = await matchResponse.json();\n            return matchInfo.message;\n          }));\n          setMatchInfoList(matchInfoData);\n        }\n      } catch (error) {\n        console.error('Error fetching user data and matches:', error);\n      }\n    };\n    fetchUserAndMatches();\n  }, [region, userName]); // Add region and userName as dependencies here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ?\n    /*#__PURE__*/\n    // Display a loading indicator when the data is being fetched\n    _jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: JSON.stringify(userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MatchList, {\n          userId: userId,\n          matches: matchInfoList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPage, \"tK1nl1HX36mvghdx4In9zfcKzbc=\", false, function () {\n  return [useParams];\n});\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useEffect","useState","MatchList","useParams","jsxDEV","_jsxDEV","UserPage","_s","userId","setUserId","region","userName","matches","setMatches","matchInfoList","setMatchInfoList","fetchUserAndMatches","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","user","matchesResponse","input","matchesData","message","matchInfoData","Promise","all","map","match","matchResponse","matchInfo","error","console","children","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VinP1/riotapp/client/src/user.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MatchList from './matchList.js';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst UserPage = () => {\r\n  const [userId, setUserId] = useState(null);\r\n  const { region, userName } = useParams();\r\n  const [matches, setMatches] = useState([]);\r\n  const [matchInfoList, setMatchInfoList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserAndMatches = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/getUser`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ region, userName }), // Use destructuring here\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setUserId(data.user);\r\n\r\n        // Fetch matches only if the user data is available\r\n        if (data.user) {\r\n          const matchesResponse = await fetch(`http://localhost:8000/getMatches`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ input: data.user }),\r\n          });\r\n\r\n          if (!matchesResponse.ok) {\r\n            throw new Error('Failed to fetch user matches');\r\n          }\r\n\r\n          const matchesData = await matchesResponse.json();\r\n          setMatches(matchesData.message);\r\n\r\n          // Fetch match info after matches have been fetched\r\n          const matchInfoData = await Promise.all(\r\n            matchesData.message.map(async (match) => {\r\n              const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ input: match }),\r\n              });\r\n\r\n              if (!matchResponse.ok) {\r\n                throw new Error(`Failed to fetch match info for matchId: ${match}`);\r\n              }\r\n\r\n              const matchInfo = await matchResponse.json();\r\n              return matchInfo.message;\r\n            })\r\n          );\r\n\r\n          setMatchInfoList(matchInfoData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user data and matches:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserAndMatches();\r\n  }, [region, userName]); // Add region and userName as dependencies here\r\n\r\n  return (\r\n    <div>\r\n      {loading ? ( // Display a loading indicator when the data is being fetched\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div>\r\n          <p>{JSON.stringify(userId)}</p>\r\n          <div>\r\n            <MatchList userId={userId} matches={matchInfoList} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM;IAAES,MAAM;IAAEC;EAAS,CAAC,GAAGR,SAAS,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMgB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEb,MAAM;YAAEC;UAAS,CAAC,CAAC,CAAE;QAC9C,CAAC,CAAC;;QAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClClB,SAAS,CAACiB,IAAI,CAACE,IAAI,CAAC;;QAEpB;QACA,IAAIF,IAAI,CAACE,IAAI,EAAE;UACb,MAAMC,eAAe,GAAG,MAAMX,KAAK,CAAE,kCAAiC,EAAE;YACtEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEO,KAAK,EAAEJ,IAAI,CAACE;YAAK,CAAC;UAC3C,CAAC,CAAC;UAEF,IAAI,CAACC,eAAe,CAACL,EAAE,EAAE;YACvB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;UACjD;UAEA,MAAMM,WAAW,GAAG,MAAMF,eAAe,CAACF,IAAI,CAAC,CAAC;UAChDd,UAAU,CAACkB,WAAW,CAACC,OAAO,CAAC;;UAE/B;UACA,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCJ,WAAW,CAACC,OAAO,CAACI,GAAG,CAAC,MAAOC,KAAK,IAAK;YACvC,MAAMC,aAAa,GAAG,MAAMpB,KAAK,CAAE,oCAAmC,EAAE;cACtEC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACP,cAAc,EAAE;cAClB,CAAC;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEO,KAAK,EAAEO;cAAM,CAAC;YACvC,CAAC,CAAC;YAEF,IAAI,CAACC,aAAa,CAACd,EAAE,EAAE;cACrB,MAAM,IAAIC,KAAK,CAAE,2CAA0CY,KAAM,EAAC,CAAC;YACrE;YAEA,MAAME,SAAS,GAAG,MAAMD,aAAa,CAACX,IAAI,CAAC,CAAC;YAC5C,OAAOY,SAAS,CAACP,OAAO;UAC1B,CAAC,CACH,CAAC;UAEDjB,gBAAgB,CAACkB,aAAa,CAAC;QACjC;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAEDxB,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACN,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExB,oBACEN,OAAA;IAAAqC,QAAA,EACGC,OAAO;IAAA;IAAK;IACXtC,OAAA;MAAAqC,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjB1C,OAAA;MAAAqC,QAAA,gBACErC,OAAA;QAAAqC,QAAA,EAAIpB,IAAI,CAACC,SAAS,CAACf,MAAM;MAAC;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/B1C,OAAA;QAAAqC,QAAA,eACErC,OAAA,CAACH,SAAS;UAACM,MAAM,EAAEA,MAAO;UAACI,OAAO,EAAEE;QAAc;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxC,EAAA,CArFID,QAAQ;EAAA,QAEiBH,SAAS;AAAA;AAAA6C,EAAA,GAFlC1C,QAAQ;AAuFd,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}