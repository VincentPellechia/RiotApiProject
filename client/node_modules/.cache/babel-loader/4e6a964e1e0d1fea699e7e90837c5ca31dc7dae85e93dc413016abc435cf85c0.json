{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VinP1\\\\riotapp\\\\client\\\\src\\\\user.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MatchList from './matchList.js';\nimport Rank from './rank.js';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPage = () => {\n  _s();\n  const {\n    region,\n    userName\n  } = useParams();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [matches, setMatches] = useState([]);\n  const [matchInfoList, setMatchInfoList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserAndMatches = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`http://localhost:8000/getUser`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            region,\n            userName\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user');\n        }\n        const data = await response.json();\n        setUser(data.user);\n        setUserId(data.user.puuid);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    const fetchMatches = async () => {\n      try {\n        if (userId) {\n          const matchesResponse = await fetch(`http://localhost:8000/getMatches`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              input: userId\n            })\n          });\n          if (!matchesResponse.ok) {\n            throw new Error('Failed to fetch user matches');\n          }\n          const matchesData = await matchesResponse.json();\n          setMatches(matchesData.message);\n\n          // Fetch match info after matches have been fetched\n          const matchInfoData = await Promise.all(matches.map(async match => {\n            const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                input: match\n              })\n            });\n            if (!matchResponse.ok) {\n              throw new Error(`Failed to fetch match info for matchId: ${match}`);\n            }\n            const matchInfo = await matchResponse.json();\n            return matchInfo.message;\n          }));\n          setMatchInfoList(matchInfoData);\n        }\n      } catch (error) {\n        console.error('Error fetching matches:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserAndMatches();\n    fetchMatches();\n  }, [region, userName, userId, matches]);\n  useEffect(() => {\n    if (user) {\n      console.log(user);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [user && /*#__PURE__*/_jsxDEV(Rank, {\n        summonerId: user.id,\n        region: region\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(MatchList, {\n        userId: userId,\n        matches: matchInfoList,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPage, \"TvKrrZCEwMR/lqfoQZ5t3zt/qj0=\", false, function () {\n  return [useParams];\n});\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["React","useEffect","useState","MatchList","Rank","useParams","jsxDEV","_jsxDEV","UserPage","_s","region","userName","user","setUser","userId","setUserId","matches","setMatches","matchInfoList","setMatchInfoList","loading","setLoading","fetchUserAndMatches","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","puuid","error","console","fetchMatches","matchesResponse","input","matchesData","message","matchInfoData","Promise","all","map","match","matchResponse","matchInfo","log","children","fileName","_jsxFileName","lineNumber","columnNumber","summonerId","id","_c","$RefreshReg$"],"sources":["C:/Users/VinP1/riotapp/client/src/user.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MatchList from './matchList.js';\r\nimport Rank from './rank.js';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst UserPage = () => {\r\n  const { region, userName } = useParams();\r\n\r\n  const [user, setUser] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [matches, setMatches] = useState([]);\r\n  const [matchInfoList, setMatchInfoList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchUserAndMatches = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(`http://localhost:8000/getUser`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ region, userName }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setUser(data.user);\r\n        setUserId(data.user.puuid);\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n\r\n    const fetchMatches = async () => {\r\n      try {\r\n        if (userId) {\r\n          const matchesResponse = await fetch(`http://localhost:8000/getMatches`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ input: userId }),\r\n          });\r\n\r\n          if (!matchesResponse.ok) {\r\n            throw new Error('Failed to fetch user matches');\r\n          }\r\n\r\n          const matchesData = await matchesResponse.json();\r\n          setMatches(matchesData.message);\r\n\r\n          // Fetch match info after matches have been fetched\r\n          const matchInfoData = await Promise.all(\r\n            matches.map(async (match) => {\r\n              const matchResponse = await fetch(`http://localhost:8000/getMatchInfo`, {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ input: match }),\r\n              });\r\n\r\n              if (!matchResponse.ok) {\r\n                throw new Error(`Failed to fetch match info for matchId: ${match}`);\r\n              }\r\n\r\n              const matchInfo = await matchResponse.json();\r\n              return matchInfo.message;\r\n            })\r\n          );\r\n\r\n          setMatchInfoList(matchInfoData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching matches:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserAndMatches();\r\n    fetchMatches();\r\n  }, [region, userName, userId, matches]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      console.log(user);\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div>\r\n          {user && <Rank summonerId={user.id} region={region} />}\r\n          <MatchList userId={userId} matches={matchInfoList} loading={loading} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}